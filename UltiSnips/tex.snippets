priority -50

extends texmath

global !p

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def create_matrix(snip):

	matrix_str = (snip.buffer[snip.line].split('mat')[0]).strip()
	if matrix_str == 's':
		matrix_str = 'small'
	matrix_str += 'matrix'

	rows = ','.join(snip.buffer[snip.line].split(",", 2)[:-1])
	cols = ','.join(snip.buffer[snip.line].split(",", 2)[-1:])

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{"+matrix_str+"}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

endglobal

snippet "b(egin)?" "begin{} / end{}" br
\begin{${1:something}}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

pre_expand "create_matrix(snip)"
snippet "([sbBpvV])?mat(rix)?(\d+),(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
	\centering
	\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet cfig "centered figure environment" b
{\centering\includegraphics[width=${1:0.8}\linewidth]{${2:1}${3:.eps}}}$0
endsnippet

snippet Cfig "Centered figure environment" b
\begin{center}
	\includegraphics[width=${1:0.8}\linewidth]{${2:1}${3:.eps}}
	\captionof{subfigure}{${4:subcaption}}
	\captionof{figure}{${5:caption}}$0
\end{center}
endsnippet

snippet ig "include graphics" b
\includegraphics[width=${1:0.8}\linewidth]{${2:1}${3:.eps}}
endsnippet

snippet ips "include pages" b
\includepdf[pages={$1}, pagecommand={$2}]{${3:scan}.pdf}$0
endsnippet

snippet trim "Trim graphics" w
trim={${1:0}cm, ${2:0}cm, ${3:0}cm, ${4:0}cm}, clip, $0
endsnippet

snippet en "Enumerate" bs
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet it "Individual item" b
\item $0
endsnippet

snippet part "Part" b
\part{${1:part name}}%
\label{prt:${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}

$0
endsnippet

snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section"
% sec:$1 {{{1 %
\section{${1:${VISUAL:section name}}}
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
% sec:$1 1}}} %
endsnippet

snippet sec* "Section"
% sec:$1 {{{1 %
\section*{${1:${VISUAL:section name}}}
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
% sec:$1 1}}} %
endsnippet


snippet sub "Subsection"
% sub:$1 {{{2 %
\subsection{${1:${VISUAL:subsection name}}}
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
% sub:$1 2}}} %
endsnippet

snippet sub* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ssub "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}
$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}
$0
endsnippet

snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet lp "Long parenthesis"
\left(${1:${VISUAL:contents}}\right)$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}
\caption{${3:caption name}}
\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\end{listing}

$0
endsnippet

snippet vs "vspace" b
\vspace*{${1:1}cm}
$0
endsnippet

snippet mcol "Multicol"
\begin{multicols}{${1:2}}
$0
\end{multicols}
endsnippet

snippet cb "Column Break" b
\columnbreak
$0
endsnippet

snippet pcode "Pseudo code block" b
\begin{algorithm}[H] % H to stop floating
\caption{${1:Algorithm Name}}
\label{alg:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\begin{algorithmic}[1] % 1 gives every line an index
\Procedure{${3:Function Name}}{${4:variables}}
$0
\EndProcedure
\end{algorithmic}
\end{algorithm}
endsnippet

snippet comment "Comment block" b
\begin{comment}
${0:${VISUAL}}
\end{comment}
endsnippet

snippet frame "Beamer frame" b
\begin{frame}{${1:Title}}
$0
\end{frame}
endsnippet

snippet ,f "frac" Ai
\frac{${1}}{${2}}${0}
endsnippet

snippet ,2 "squareroot" Ai
\sqrt{${1}}${0}
endsnippet

snippet __ "null" Ai
_{${1}}${0}
endsnippet

snippet ^^ "null" Ai
^{${1}}${0}
endsnippet

snippet $$ "null" Ais
$${1}$${0}
endsnippet

# snippet "(\s)?\$\$" "null" Ars
# `!p snip.rv = '\n' if match.group(1) is not None else ''`$${1}$
# ${0}
# endsnippet

snippet mp "mini page"
\begin{minipage}{${1}\linewidth}
	${0:${VISUAL}}
\end{minipage}
endsnippet

snippet "(\w+)?ev" "environment" br
\begin{`!p
tmp = match.group(1) if match.group(1) is not None else "something"
snip.rv = tmp`}
	${0:${VISUAL}}
\end{`!p snip.rv = tmp`}
endsnippet

snippet "(\w+)?cm" "command" r
\\`!p
tmp = match.group(1) if match.group(1) is not None else "something"
snip.rv = tmp`{$0}
endsnippet

snippet bib "include reference" b
% \nocite{*}
% \bibliography{reference}{}
% \bibliographystyle{ieeetr}
endsnippet

# vim:ft=snippets:
